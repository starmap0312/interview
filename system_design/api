# API: application programming interface
  1) a set of routines, protocols, and tools for building applications
     API expresses a software component in terms of its:
       operations / inputs / outputs / underlying types
     the interface definitions are independent of implementations
       API prescribes the expected behavior, while library is the actual implementation
  3) API may be used for a web-based system, operating system, or database system
  4) API can assist distinct applications with sharing data (helpful for integration)
  5) API comes in the form of:
     libraries: specifications for routines / data structures / object classes / variables
     specification of remote calls exposed to consumers: ex. SOAP / REST services
  6) some examples:
     international standards: POSIX
     vendor documentation: Microsoft Windows API
     libraries of programming languages: C++ Standard Template Library (STL), Java APIs

# API in procedural languages
  1) API specifies
     a) a set of functions that accomplishes a task
     b) a set of functions that are allowed to interact with a software component
  2) example:
     sqrt function (UNIX math C-library)

     SYNOPSIS
       #include <math.h>
       double sqrt(double X);
       float  sqrtf(float X);
     DESCRIPTION
       sqrt computes the positive square root of the argument. ...
     RETURNS
       On success, the square root is returned. If X is real and positive...

  3) in this case, API is the collection of the include files used by a program to
       reference that library function

# API in object-oriented languages
  1) an object API is a description of how objects work
     i.e. a set of classes with an associated list of class methods
  2) example:
     Java Scanner class: used to read input from the user in text-based programs

     (Scanner object usage)

     import java.util.Scanner;

     public class Test {
         public static void main(String[] args) {
             Scanner scanner = new Scanner("MyScanner");
             String input = scanner.nextLine();
             System.out.println(input);
             inputScanner.close();
         }
     }

     methods nextLine() and close() are the APIs for the Scanner class

     public String nextLine()
       advances this scanner past the current line and returns the skipped input...
     Returns:
       the line that was skipped
     Throws:
       NoSuchElementException - if no line found
       IllegalStateException - if this scanner is closed

  3) API includes a set of class definitions:
     a) the public components
        ex. the real functionality exposed, implemented as public class methods
            other components: public fields / constants / nested objects / enums
     b) a set of behaviors associated with the class
        a class interface in an API may have no method at all
        ex. Java Serializable interface
            requires each class implementing it to behave in a serialized fashion
            i.e. the class is based on a representation that can be saved (serialized) at any time

  4) API is the collection of all the kinds of objects one can derive from the class
       definitions, and their associated possible behaviors

  5) Java JDK includes a set of APIs used by the developers to build new Java programs

# API and protocols
  1) protocols usually allow different technologies to exchange information
     an abstraction / mediation level between the two different environments (systems)
  2) API can be an implementation of a protocol 
     ex: RMI is an API that implements the JRMP protocol
  3) when an API implements a protocol, it can prescribe a language-neutral message format
     ex. SOAP uses XML as a general container for messages to be exchanged

# web API
  used to create an open architecture for sharing content and data between applications
  1) before, web API = web service
  2) now, web 2.0 has been moving web API away from:
       Simple Object Access Protocol (SOAP) based web services and Service-Oriented Architecture (SOA)
     towards more direct 
       Representational State Transfer (REST) web resources and Resource-Oriented Architecture (ROA)
     implementations
     ex.
       SOA: SOAP over HTTP / SOAP over JMS
       ROA: RESTfull services, implemented as JSON over HTTP / XML over HTTP

  3) web API allows the combination of multiple APIs into new applications known as mashups
     i.e. a web application that uses content from multiple sources to create a new service
          displayed in a single graphical interface

  4) SOA (service-oriented) vs. ROA (resource-oriented)

     a SOA service usually involves more processing (ex. delivering a photo or resizing a photo)
       focusing on interfaces and use terms like method, operation, etc., and is related to RPC-style
       independent of the technical architecture, i.e. it can be REST/HTTP applications

     a ROA resource usually refers to static data (ex. photo)
       emphasizing on HTTP objects that respond to standard HTTP methods (GET/PUT/UPDATE/DELETE)
       not independent of the technical architecture, so it is less general than SOA

     ex. a SOA service (works as a Facade)
         uses external services, supplying them with parameters, and combining the results for the user
     ex. a ROA resource
         retreives static resources (uses external resources as input) and then processing internally

     (ambiguity: Flickr is a service that provides photo, but can also be seen as a resource of photo)

# SOAP: Simple Object Access Protcol
  1) an XML based protocol for exchanging information between computers
     XML is used to create the request and to parse the response
  2) Binary messaging: traditional technologies
       ex. Distribute Component Object Model (DCOM)
       ex. Common Object Request Broker Architecture (CORBA)
     XML messaging: works better over internet
       ex. SOAP
  3) built-in error handling
     if the request has a problem, the response contains error information

# REST: Representational State Transfer
  1) a set of functions to which the developers perform requests and receive responses
  2) the interaction is often made via HTTP protocol
  3) view the product data as a resource, which should contain all the required information
  4) resources are identified by logical URLs

# RESTful services
  1) web services written by applying REST architectural concept
     a) often use HTTP for client-server communication (REST over HTTP)
     b) use CVS, XML, JSON, etc. as formatting language
     c) use simple URI as the address for the services
     d) stateless communication (server has no state)
  2) how system resource / state of resource should be transported, ex. over HTTP protocol, to
     a client written in different languages
  3) a common example: map HTTP methods, GET / POST / PUT / DELETE, to CRUD operations
     a) GET / Read
        requests a resource at the request URL (can be cached locally or on the server)
     b) POST / Create: sends data to the URI
        submit information to the service for processing, return the modified or new resource
     c) PUT / Update: puts a resource / file at the URI
        update the resource at the request URL 
     d) DELETE / Delete
        removes the resource at the request URL 

# SOAP vs. REST
  1) SOAP: a protocol, through which two computers communicate by sharing XML documents
     REST: an architectural style / design, protocol independent
  2) SOAP: hard to use, must create the required XML structure absolutely every time
     REST: easy to use, relying on a simple URL
  3) SOAP response: only XML
     REST response: CVS, JSON, RSS, etc.
  4) SOAP: language, platform, transport independent
           runs on HTTP but envolopes the message
     REST: uses HTTP headers to hold meta information
       ex. media types
           notify server to return in JSON format (set Accept Header to application/json)
           send data to server in JSON format (set Content-Type Header to application/json)
           notify server to return in XML format (set Accept Header to application/xml)
           send data to server in XML format (set Content-Type Header to application/xml)
  5) SOAP: works well in distributed environment
     REST: direct point-to-point communication
  6) the degree of coupling between client and server
     SOAP client
        works like a custom desktop applicaiton, tightly coupled to the server
        a rigid contract between the client and the server, and any change to either side is
        likely to break the other
        the client needs prior knowledge of how to use and interact with the service
     REST client
        works like a browser, a generic client that only knows how to use a protocol and the
        standardized methods
        needs no prior knowledge of the API, expect for the entry point URI and the media type
  7) REST client can be extended by code-on-demand supplied by the server
     ex. javascript code transfered to the client side, used to drive the interaction with
         another service

# API design
  1) information hiding: divide software into modules, each of which has an interface
     hides the implementation details of the modules and exposes only those that clients must know
  2) an API should be consistent with other APIs already in use in the system
  3) API design is language- and system-dependent

# API document
  1) description: brief description about what the function does
  2) syntax: syntax about the parameter of the code, the sequence in which they occur, and
             required / optional elements
  3) parameters: function parameters
  4) error messages: syntax of the error messages
  5) example code: small snippet of code
  6) related links: related functions

# API testing
  common tests:
  1) verify if the API updates data structure (resource update)
  2) verify if the API returns anything (resource read)
  3) verify the returned values of the API, based on its input conditions (resource read)
  4) verify if the API triggers other event or calls another API (service)

# API testing vs. unit testing
  1) test by QA team vs. test by DEV team
  2) test after each new build is ready vs. test before the code is included in the build
  3) blackbox testing vs. whitebox testing
  4) used by end users (external developers) vs. test funcationality of each unit in isolation

# challenges of API testing
  1) parameter selection
  2) parameter combination
  3) call sequencing

# API test design
  1) setup: create objects, start services, and initialize data
  2) execution: steps to exercise API and logging
  3) verification: evaluate execution outcome
  4) reporting: pass, failed, or blocked
  5) clean-up: pre-test state
